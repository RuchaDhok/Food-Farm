# Class Based Components

- It's a normal JS class

import React from "react"
class UserClass extends React.Component {
  render() {
    return (
      <div className="user-card">
        <h2>Name : Rucha</h2>
      </div>
    );
  }
}

or 

import {Component} from "react"
class UserClass extends Component {
  render() {
    return (
      <div className="user-card">
        <h2>Name : Rucha</h2>
      </div>
    );
  }
}

- React.Component tells that it is a react class based 
component.
- It has render() method which returns the piece of JSX
- React.Component is a class which is given by react and UserClass
is inheriting some property from it.


-- In order to receive the props in the class based component
we create the constructor, and constructor will receive the props.
and we also need to write super(props)

constructor(props) {
    super(props);
    console.log(props);
  }

-- super(props) ensure that the constructor props are correctly 
passed to the parent constructor, allowing us to access this  
props inside the constructor and other methods of the React class component.

-- To use the props inside the class we write 
   <h2>Name : {this.props.name}</h2>

-- When we say rendering a functional component, 
   it means we are loading we are mounting the function on the webpage.

-- When we say we are loading class based component it means we are creating instance of the class.
   Whenver the new instance of class is created, constructor is called.
   Constructor is the best place to receive the props and to create the state variable.

# Creating state variable in class based component

 constructor(props) {
    super(props);
    this.state = {
      count : 0
    }
  }

  state is the big object. count is the state variable and
  0 is the initial value.

-- Creating multiple state variables.

this.state = {
      count: 0,
      count2: 1,
    };

-- Updating state variables.
   - Never ever update state variable directly.
     this.state.count =  this.state.count + 1;
     Never do this.


   - To update the state variable, react has given 
    this.setState({count : this.state.count + 1})
    e.g.
    <button onClick={() => {
            this.setState({
              count: this.state.count + 1,
            });
          }}
        > Click Me!!
    </button>


# LifeCycle of the class based component
 
-- Here, About.js and UserClass.js and we are creating once instance of UserClass.js

  render() {
    console.log("Parent Render");
    return (
      <div>
        <h1>About Class Component</h1>
        <UserClass name={"First"} location={"Bengaluru (Class)"} />
      </div>
    );
  }

Output : 

  Parent Constructor
  Parent Render
  Child Constructor
  Child Render
  Child Component Did Mount
  Parent Component Did Mount

componentDidMount() is called after the component is mounted on the webpage.
and therefore,
componentDidMount() is used to make API calls.

-- Suppose we have multiple childrens in About.js
i.e. 

  render() {
    console.log("Parent Render");
    return (
      <div>
        <h1>About Class Component</h1>
        <UserClass name={"First"} location={"Bengaluru (Class)"} />
        <UserClass name={"Second"} location={"US"} />
      </div>
    );
  }

Output :

Parent Constructor
About.js:26 Parent Render
UserClass.js:14 First Child Constructor
UserClass.js:26 First Child Render
UserClass.js:14 Second Child Constructor
UserClass.js:26 Second Child Render
UserClass.js:18 First Child Component Did Mount
UserClass.js:18 Second Child Component Did Mount
About.js:22 Parent Component Did Mount

Why it is different for multiple child  ? 

https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

-- React has two phases
    1.) Render phase
    2.) Commit phase

a.) Mouting

In the render phase (triggering the reconciliation), firstly the parent constructor is called, 
then parent render method is called.

If the component has multiple child then react batches the render phase of all the childs
that means, 
first child constructor is called
first child render is called
second child constructor is called
second child render is called

Then it moves to the commit phase, [DOM manipulation + componentDidMount() method is called]
React batches the commit phase of the child. it updates the DOM collectively (as it is an expensive task)
then 
first child componentDidMount() is called
second child componentDidMount() is called.

At last 
parent componentDidMount() is called.

this is how react is optimising the performance. 

How to make an API call ? 
  1.) create the state variable in the constructor.
    
    constructor(props) {
    super(props);

    //Creating state variable
    this.state = {
      userInfo: {
        login: "Dummy",
        type: "Default",
      },
    };
  }

  2.) in componentDidMount() we call the API
        //Api Calls -- fill the data in the component and the component re renders

    async componentDidMount() {
    const data = await fetch("https://api.github.com/users/Rucha-Dhok");
    const json = await data.json();
    this.setState({
      userInfo: json,
    });
  }

  3.) use the state variable in JSX

      return (
      <div className="user-card">
        <h2>Name : {login}</h2>
        <h3>Location : {type} </h3>
        <h4>Contact : 8987022675</h4>
      </div>
    );


Now behind the scenes, how things work : 

  Mounting phase starts, 
  Constructor is called, render the component. DOM is updated with the dummy data. 
  and componentDidMount() is called where api call is made.
  Mounting phase ends.
  
  Mounting phase ends and as soon as the state changes [step : 2], UPDATING LifeCycle starts.
  As per the diagram, in the render phase of UPDATING cycle. 
  whenever the state changes, render() is called.
  React updates the DOM with the new state values and ComponentDidUpdate() method is called.

hence, overall :

Parent Constructor
Parent Render
First Child Constructor
First Child Render
First Child Component Did Mount
Parent Component Did Mount
First Child Render
First Child ComponentDidUpdate


Example :

--- Mounting Life cycle ---

Constructor (dummy data)
render (dummy)
  <HTML Dummy/> --> React updates DOM
componentDidMount()
  <API call>
  <this.setState({}) --> state variable is updated

Whenever there is setState(), it triggers the reconciliation cycle and Updating Life cycle begins

--- Updating Life cycle ---

    render(API data)
    <HTML (new API data)> --> React updates DOM
ComponentDidUpdate()

--- Unmounting LifeCycle ---

Unmounting means, whenever the component is removed or unloaded from the DOM.
it called
componentWillUnmount();

Suppose, if we try to go from About [child - UserClass.js] to ContactUs page.

Parent Constructor
Parent Render
First Child Constructor
First Child Render
First Child Component Did Mount
Parent Component Did Mount
First Child Render
First Child ComponentDidUpdate
First Child ComponentWillUnmount

