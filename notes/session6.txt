// Exploring the world

A hook is a normal JS function with the specific use case in react

useEffect(() => {
    console.log("useEffect called");
  }, []);

useEffect takes two argument, first is the callback function and the next is dependency array.
useEffect function will be called, after the first render of the component.

-- CORS policy
Our browser is not allowing to call the swiggy's api from one origin to another origin
CORS Chrome extension can bypass the cors issue.

//Optional Chaining

-- Why we need useState(). Why do we have useState()??
   - If we use normal JS variable, then it do not reflect on the screen although it does change the value 
     (in the console can be seen). But re rendering doesn't happen.React do not understand the 
     normal JS variable. React don't have the way to track whether the JS variable has been changed or not.
     
     But whenver the setMethod gets called and our state changes, thus component re renders. 
     and the dom gets updated. 

   - As soon as setMethod() is called, it will update the value "method" and re render the whole 
     component. Now, the new copy of Virtual DOM gets created and it compares with the previous 
     version of the Virtual DOM [ diff algorithm ]. whereever the difference is there, it just updates the 
     same on the DOM. And the entire process is reconciliation.

-- In order to implement the input box, first we need to bind the input box value with the local state 
   variable with empty string. Then in order to make the changes in the tied input box, we need to write
   the onChange() handler to get the data of the input box.
   As soon as I make any change in the input box I need to update my tied local state variable.

-- Whenever state variable updates, react triggers a reconciliation cycle (re-renders the component)
   but it only update that specific part of dom [old Virtual DOM is compared with the new virtual DOM using
   the diff algorith and the difference is updated]

-- React Fiber is the new way of reconciliation process to efficiently process the DOM.