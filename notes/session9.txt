# Optimizing our App

-- Single Responsibility Principle
    - Each of the component should have single responsibility.
    - Maintaining the code in a modular fashion which means breaking down the code in the small modules
      thus making the code the maintainable, testable, resuable.  e.g. RestaurantCard

-- HOOKS
  - Hooks are special JS function which are given by react.
  - Hooks are just utility function.

-- CUSTOM HOOKS
    - Extract some responsibility from the component and put it in a hook, so that our hook and 
      component becomes more modular and readable.
    - It is not compulsory to write custom hooks, it will just make our code more readable and modular.
    
    While creating the custom hooks, use the small characters "use" in the name. 
    It's not mandatory but it's react recommended.
    If we don't use "use", and project is using lint then it might throw error.
    This is the way of react gets to know that it's a hook.
    e.g. useRestaurantMenu

    Understand what this custom hook will take as input and what will be the output.

-- Building a feature.
   - If the user is online or offline depending on the user's network.
   - Understand what this custom hook will take as input and what will be the output.

   - window or the browser gives us the eventlisteners to check whether we are online or offline.
   - eventlisteners will keep the track when the internet is online or offline.
   - How many times, we need to add the eventlisteners. just once.
      hence, we will use useEffect.

###
Parcel is a bundler. Basic job is to bundle the application.
It takes all your file and make it One [dist folder - 1 js file] and give it to the browser.
we can also see that 1 file in browser [network tab - JS - 1js file]

What if we have large scale application. Thousands of files. Size of .js file will increase a lot.
Hence, bad Performance. It will take time to load.
So, we need to break down the app in small pieces. that means chunking down in small js files.

-- Whenever we build large scale application (1000s of components). Performance is not that good.

Problem ?
  - Thousands of files. While bundling, size of 1 .js file will increase a lot.
Hence, bad Performance. It will take time to load.

Solution ?
 - We need to break down the app in small pieces. that means chunking down in small js files.
 - Also called as 
      Chunking, 
      Code Splitting, 
      Dynamic Bundling 
      LazyLoading
      On demand Loading
      Dynamic import

 - Logical sepration of the bundles 
      - A Bundle should have enough code for a feature.

e.g.
MMT - 
  1 bundle for flights
  1 bundle for homestays
  1 bundle for cabs

How to do ? 
    - For example. Create Grocery component, in the header.
    - Now, we need to make the Grocery in a different bundle.

    - This can be achieved using LazyLoading (on Demand Loading)
          - When the app is loaded it will not load the code for Grocery component.
          - It will only load when we click on the Grocery tab.

//code in App.js
          import {lazy} from "react";

          const Grocery = lazy(() => import("./components/Grocery"));

          {
            path: "/grocery",
            element: <Grocery />,
          },

This is how we have the splitted the code in two js bundles. one is for Grocery. 
and the second is for the whole app. As we can see in the network tab and dist folder.

Now we can observe, as we click on the Grocery tab, although Grocery bundle gets loaded. But it 9ms to load.
Meanwhile, react do not find anything to render. 
hence it throws the error on console.

Error: A component suspended while responding to synchronous input.

Thus, to avoid this. we use Suspense. It's a component from react library.
We can simply wrap our component in Suspense.

In Suspense we give fallback (which takes JSX), so that what we should render till the time 
we get Grocery component.

//code

          import {lazy} from "react";

          const Grocery = lazy(() => import("./components/Grocery"));

          {
          path: "/grocery",
          element: (
            <Suspense fallback={<h1>Loading....</h1>}>
              <Grocery />
            </Suspense>
          ),
        },