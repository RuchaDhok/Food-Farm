import React from "react";
import ReactDOM from "react-dom/client";

-- React.createElement => React Element - JS Object => HTMLElement(render)

const heading = React.createElement(
"h1",
{
id: "heading",
},
"Food Farm"
);
console.log(heading);

-- JSX is not HTML inside Javascript
-- JSX is HTML like syntax or XML like syntax

-- JSX is converted to (babel is converting) => React.createElement => ReactElement - JS Object => HTMLElement(render)

-- React Element :
const jsxHeading = (

  <h1 id="jsxHeading" tabIndex="5">
    Food Farm from JSX
  </h1>
);
 
 or

const heading = (
  <h1 id="jsxHeading" tabIndex="5">
    Food Farm from JSX
  </h1>
);

console.log(jsxHeading); //Object

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(jsxHeading);

---------- React Component ---------------

-- React Component :
1.) Class Based Component (old way)
2.) Functional Component (new way)

React Functional Component is just a Javascript function which returns some JSX code i.e React element (after babel transpiled to React Element)

Below both the syntax are same

const HeadingComponent = () => {
return <h1 className="header">React Functional Component</h1>;
};

const HeadingComponent2 = () => (
  <h1 className="header">React Functional Component</h1>
);

-- How to render functional component in root ?

root.render(<HeadingComponent/>)

-- Component Composition
One function inside another is function composition
e.g.
const HeadingComponent = () => (

  <div id="container">
    <h1 className="header">React Functional Component</h1>
    <Title />
  </div>
);

-- We can inject any JS code in the {},mathematical expression, function invocation,console.log()
e.g
const element = 1000;
const Title = () => <h1 className="title">Title</h1>;
const HeadingComponent = () => (

  <div id="container">
    {Title()}
    <h2>{element}</h2>
    <Title/>
    <Title></Title>
    <h1 className="header">React Functional Component</h1>
  </div>
);

whenever we have element simply write in {}
